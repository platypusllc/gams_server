
#ifndef   _THREAD_IO_THREAD_H_
#define   _THREAD_IO_THREAD_H_

#include <stdio.h>
#include <iostream>
#include <string>
#include <sstream>
#include <thread>
#include <memory>
#include <vector>
#include <chrono>

#include <boost/asio.hpp>
#include <boost/system/error_code.hpp>
#include <boost/asio/serial_port.hpp>
#include <boost/asio/buffer.hpp>
#include <boost/asio/io_service.hpp>

#include "madara/threads/BaseThread.h"

#include "../json.hpp"
#include "../boat_containers.h"

#define BUFFER_SIZE 256
#define EBOARD_PORT_NAME "/dev/ttyACM0" // the bottom usb 3 slot (the horizontal ones) on the odroid
#define EBOARD_BAUD_RATE 115200
#define END_OF_LINE_CHAR '\n'
#define INITIAL_REJECT_COUNT 10 // number of lines to reject initially to avoid junk

using json = nlohmann::json;

namespace threads
{
  /**
  * A custom thread generated by gpc.pl
  **/
  class io_thread : public madara::threads::BaseThread
  {
  public:
    /**
     * Default constructor
     **/
    io_thread (std::shared_ptr<boost::asio::serial_port> port, Containers & containers);
    
    /**
     * Destructor
     **/
    virtual ~io_thread ();
    
    /**
      * Initializes thread with MADARA context
      * @param   context   context for querying current program state
      **/
    virtual void init (madara::knowledge::KnowledgeBase & knowledge);

    /**
      * Executes the main thread logic
      **/
    virtual void run (void);

  protected:
    /// data plane if we want to access the knowledge base
    madara::knowledge::KnowledgeBase data_;
    std::shared_ptr<boost::asio::serial_port> port_;
    Containers containers_;
    char raw_buffer_[BUFFER_SIZE];
    std::string raw_data_;

  };
} // end namespace threads

#endif // _THREAD_IO_THREAD_H_
